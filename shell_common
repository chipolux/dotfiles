#!/bin/sh
PARTS=("/usr/local/bin"
       "/usr/local/sbin"
       "/opt/local/bin"
       "/opt/local/sbin"
       "$HOME/.local/bin")

for PART in "${PARTS[@]}"; do
    if [[ -e $PART && ":$PATH:" != *":$PART:"* ]]; then
        export PATH="$PART:$PATH"
    fi
done

# pyenv
if [ -f "$(which pyenv)" ]; then
    eval "$(pyenv init -)"
fi
if [ -f "$(which pyenv-virtualenv-init)" ]; then
    eval "$(pyenv virtualenv-init -)"
fi

# virtualenvwrapper
if [ -z "$PYENV_SHELL" ]; then
    venvwrapper=$(which virtualenvwrapper.sh)
    if [ -f ~/.local/bin/virtualenvwrapper.sh ]; then
        venvwrapper=~/.local/bin/virtualenvwrapper.sh
    fi

    if [ $venvwrapper ] && [ -s $venvwrapper ] && [ -z $VIRTUAL_ENV ]; then
        export WORKON_HOME=$HOME/.virtualenvs
        export PIP_VIRTUALENV_BASE=$WORKON_HOME
        export VIRTUALENVWRAPPER_PYTHON=$(which python3)
        source $venvwrapper
    fi
fi

# cheapo virtualenvwrapper
unset -f activate 2>> /dev/null
function activate() {
    PROJ_DIR=$(git rev-parse --show-toplevel)
    if [ $PROJ_DIR ]; then
        PROJ_DIR="$PROJ_DIR/"
    fi
    ACTIVATE_SCRIPTS=("${PROJ_DIR}.venv/bin/activate"
                      "${PROJ_DIR}.env/bin/activate"
                      "${PROJ_DIR}venv/bin/activate"
                      "${PROJ_DIR}env/bin/activate")
    for ACTIVATE_SCRIPT in "${ACTIVATE_SCRIPTS[@]}"; do
        if [ -f "$ACTIVATE_SCRIPT" ]; then
            . "$ACTIVATE_SCRIPT"
            return 0
        fi
    done
    if [ -f 'poetry.lock' ] && [ -f 'pyproject.toml' ]; then
        poetry shell
        return 0
    fi
    echo 'No environment found to activate :('
    return 1
}

# Ack-grep to ack
if [ -s "$(which ack-grep)" ]; then
    alias ack='ack-grep'
fi

# useful aliases
alias lt='ls -lth'
alias rsync='rsync -h --progress --partial'
alias gvir='gvim --remote'
alias tree='tree -I __pycache__'
alias mail-personal='mutt -F ~/.mutt/personal.muttrc'
alias feh='feh --magick-timeout 1 --geometry 500x500'

# TODO: need to make this work on linux.
unset -f pman 2>> /dev/null
function pman() {
    man -t "$@" | open -f -a Preview
}

# setup custom dir mapping tool
unset -f map 2>> /dev/null
function map() {
    tree -a -J $1 | $HOME/.dotfiles/map.py | dot -Tpdf
}

# function to open vim with fuzzy found file
# alias vf='vim $(fzf --height 30)'
unset -f vf 2>> /dev/null
function vf() {
    f=$(fzf --height 30 --query "$*")
    if [ $f ] && [ -f $f ]; then
        vim $f
    fi
}

# function to git diff with fzf to pick a file
unset -f gdf 2>> /dev/null
function gdf() {
    f=$(fzf --height 30 --query "$*")
    if [ $f ] && [ -f $f ]; then
        git diff $f
    fi
}

# function to git add with fzf to pick a file
unset -f gaf 2>> /dev/null
function gaf() {
    f=$(fzf --height 30 --query "$*")
    if [ $f ] && [ -f $f ]; then
        git add $f
    fi
}

# function to open with fuzzy found file
unset -f of 2>> /dev/null
function of() {
    f=$(fzf --height 30 --query "$*")
    if [ $f ] && [ -f $f ]; then
        open $f
    fi
}

# function to countdown the provided seconds
# ex: `countdown $((5*60))` to countdown for 5 minutes
unset -f countdown 2>> /dev/null
function countdown() {
    t=$((`date +%s` + $1))
    while [ "$t" -gt `date +%s` ]; do
        echo -en "\r\033[K$(($t - `date +%s`))"
        sleep 0.1
    done
    if [ "$(uname)" = "Darwin" ]; then
        say -v Fred "Your $(printf "%'.0f" $1) second timer is done!"
    fi
    echo -e "\nDONE"
}

# make fzf use fd for searching file names
export FZF_DEFAULT_COMMAND='fd --type f'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# make ripgrep aware of configuration and set it up to use a pager
unset -f rg 2>> /dev/null
export RIPGREP_BIN=$(which rg)
export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"
function rg() {
    $RIPGREP_BIN -p "$@" | less -RFX
}
# replace other search tools with ripgrep
alias ag='rg'
alias ack='rg'

# Don't close terminal on Ctrl+D
export IGNOREEOF=2

# Coloring on some systems for ls
# http://osxdaily.com/2012/02/21/add-color-to-the-terminal-in-mac-os-x/
export CLICOLOR=1
export LSCOLORS=GxfxcxdxbxAgAdabagacad

if [ $TERM = "screen" ]; then
    export TERM=screen-256color
fi

# Make less not clear screen on exit (-X), exit if content fits (-F), and use
# colors (-R)
export LESS="-XFR"

export EDITOR=vim

# If there is stuff like API tokens, keys, etc that need to be put in the
# environment, put them in ~/.private_profile and this will source them in
if [ -s "$HOME/.private_profile" ]; then
    source "$HOME/.private_profile"
fi
